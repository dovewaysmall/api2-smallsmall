name: Deploy API2 SmallSmall to AWS EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  APPLICATION_NAME: api2-smallsmall-platform
  DEPLOYMENT_GROUP_NAME: api2-production

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, gd, zip, bcmath

    - name: Create .env for testing
      run: |
        cat > .env << 'EOL'
        APP_NAME=Laravel
        APP_ENV=testing
        APP_KEY=base64:PZyo6EHC+JXfokKj6g4smB/fF91qVHfGv6flBCAdwAk=
        APP_DEBUG=true
        APP_URL=http://api2.smallsmall.com
        
        LOG_CHANNEL=stack
        
        DB_HOST=rss.cojxxisixk5c.eu-west-1.rds.amazonaws.com
        DB_PORT=3306
        DB_DATABASE=rentsmallsmall_furnisure_buytolet_database
        DB_USERNAME=rentsmallsmall_buytolet
        DB_PASSWORD=Buytolet!2021
        
        CACHE_DRIVER=array
        QUEUE_CONNECTION=sync
        SESSION_DRIVER=array
        EOL

    - name: Install Dependencies
      run: |
        composer update -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS laravel_test;"
        mysql -h 127.0.0.1 -u root -ppassword -e "SHOW DATABASES;"

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Execute tests
      run: vendor/bin/phpunit --testdox

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, mysql, gd, zip, bcmath

    - name: Install Dependencies
      run: composer install --optimize-autoloader --no-dev

    - name: Skip frontend build for API-only project
      run: echo "Skipping frontend asset compilation for API-only Laravel project"

    - name: Create deployment package
      run: |
        mkdir -p deployment
        
        # Copy files excluding the deployment directory itself
        rsync -av --exclude='deployment' --exclude='node_modules' --exclude='.git' --exclude='tests' --exclude='.github' . deployment/
        
        # Create scripts directory FIRST
        mkdir -p deployment/scripts
        
        cat > deployment/appspec.yml << 'EOF'
        version: 0.0
        os: linux
        files:
          - source: /
            destination: /var/www/api2smallsmall
            overwrite: yes
            file_exists_behavior: OVERWRITE
        permissions:
          - object: /var/www/api2smallsmall
            owner: www-data
            group: www-data
            mode: 755
            type:
              - directory
            pattern: "**"
        hooks:
          ApplicationStop:
            - location: scripts/stop_server.sh
              timeout: 300
              runas: root
          AfterInstall:
            - location: scripts/install_dependencies.sh
              timeout: 300
              runas: root
          ApplicationStart:
            - location: scripts/start_server.sh
              timeout: 300
              runas: root
        EOF
        
        cat > deployment/scripts/stop_server.sh << 'EOF'
        #!/bin/bash
        sudo systemctl stop apache2
        EOF
        
        cat > deployment/scripts/install_dependencies.sh << 'EOF'
        #!/bin/bash
        cd /var/www/api2smallsmall
        echo "Files in directory:"
        ls -la
        
        if [ ! -f "composer.json" ]; then
            echo "composer.json not found!"
            exit 1
        fi
        
        export COMPOSER_ALLOW_SUPERUSER=1
        composer install --optimize-autoloader --no-dev --no-interaction
        
        if [ -f .env.production ]; then
            cp .env.production .env
        fi
        
        if [ -f artisan ]; then
            php artisan key:generate --force
            php artisan config:cache
            php artisan route:cache
            php artisan migrate --force
        fi
        
        chown -R www-data:www-data /var/www/api2smallsmall
        chmod -R 755 /var/www/api2smallsmall
        EOF
        
        cat > deployment/scripts/start_server.sh << 'EOF'
        #!/bin/bash
        sudo systemctl start apache2
        EOF
        
        chmod +x deployment/scripts/*.sh
        
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload to S3
      run: |
        cd deployment
        zip -r ../deploy-package.zip .
        cd ..
        aws s3 cp deploy-package.zip s3://${{ secrets.S3_BUCKET_NAME }}/api2-deploy-package-${{ github.sha }}.zip

    - name: Create CodeDeploy deployment
      run: |
        echo "Available deployment configurations:"
        aws deploy list-deployment-configs
        echo "Creating deployment with correct config:"
        aws deploy create-deployment \
          --application-name ${{ env.APPLICATION_NAME }} \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=api2-deploy-package-${{ github.sha }}.zip,bundleType=zip

    - name: Debug deployment package
      run: |
        echo "=== Deployment package contents ==="
        ls -la deployment/
        echo "=== Check for composer.json ==="
        ls -la deployment/composer.json || echo "composer.json NOT FOUND"
        echo "=== Check for artisan ==="
        ls -la deployment/artisan || echo "artisan NOT FOUND"
        echo "=== Check for .env.production ==="
        ls -la deployment/.env.production || echo ".env.production NOT FOUND"